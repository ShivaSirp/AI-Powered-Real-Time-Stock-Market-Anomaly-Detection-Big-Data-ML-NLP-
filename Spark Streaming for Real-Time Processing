from pyspark.sql import SparkSession
from pyspark.sql.functions import col, from_json
from pyspark.sql.types import StructType, StringType, FloatType, IntegerType

spark = SparkSession.builder.appName("StockAnomalyDetection").getOrCreate()

schema = StructType() \
    .add("symbol", StringType()) \
    .add("price", FloatType()) \
    .add("volume", IntegerType()) \
    .add("timestamp", IntegerType())

df = spark.readStream \
    .format("kafka") \
    .option("kafka.bootstrap.servers", "localhost:9092") \
    .option("subscribe", "stock_data") \
    .load() \
    .selectExpr("CAST(value AS STRING)")

df = df.select(from_json(col("value"), schema).alias("data")).select("data.*")

# Define anomaly detection logic (price change > 10% within 10 minutes)
df = df.withColumn("is_anomaly", (col("price") > 1.1 * col("price").over("10-minute-window")).cast("int"))

query = df.writeStream \
    .format("console") \
    .outputMode("append") \
    .start()

query.awaitTermination()
